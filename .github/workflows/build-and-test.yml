name: Java CI with Maven - Build and Test

on:
  push:
    branches: [ "main", "master" ]
  pull_request:
    branches: [ "main", "master" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    # =================================================================
    # YENİ BÖLÜM: Servis Konteynerleri
    # =================================================================
    # Bu 'job' için arka planda ek konteynerler başlatır.
    services:
      # 'postgres' adında bir servis başlat
      postgres:
        # Docker Hub'dan bu imajı kullan
        image: postgres:14-alpine
        # Konteynerin içindeki PostgreSQL'in hazır olduğundan emin ol
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Robotun 5432 portunu, konteynerin 5432 portuna bağla
          - 5432:5432
        # Bu test veritabanı için ortam değişkenleri (username, password, db adı)
        env:
          POSTGRES_DB: book_social_test_db
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpassword

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build and Test with Maven
        # =================================================================
        # YENİ BÖLÜM: Ortam Değişkenleri (env)
        # =================================================================
        # Maven komutuna, application.properties'teki ayarları ezmesi için 
        # bu yeni test veritabanı bilgilerini veriyoruz.
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/book_social_test_db
          SPRING_DATASOURCE_USERNAME: testuser
          SPRING_DATASOURCE_PASSWORD: testpassword
          # Test sırasında Flyway'in çalışmasını ve şemayı oluşturmasını sağlıyoruz
          SPRING_JPA_HIBERNATE_DDL_AUTO: none 
          SPRING_FLYWAY_SCHEMAS: book_social
          SPRING_FLYWAY_LOCATIONS: classpath:db/migration
        
        # -f base-code/pom.xml komutuyla Maven'a pom.xml'in nerede olduğunu söylüyoruz.
        run: mvn clean install -f base-code/pom.xml